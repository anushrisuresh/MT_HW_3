#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple
from functools import reduce
from tqdm import tqdm

# Utility function for coverage bitmap
def bitmap(sequence):
    """ Generate a coverage bitmap for a sequence of indexes """
    return reduce(lambda x, y: x | y, map(lambda i: int('1' + '0' * i, 2), sequence), 0)

def bitmap2str(b, n, on='o', off='.'):
    """ Generate a length-n string representation of bitmap b """
    return '' if n == 0 else (on if b & 1 == 1 else off) + bitmap2str(b >> 1, n - 1, on, off)

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=200, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=100, type="int", help="Maximum stack size (beam width, default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))

# Hypothesis structure with beam search and reordering support
hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase, coverage")

for f in tqdm(french):
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None, 0)  # 0 = no words translated
    stacks = [{} for _ in range(len(f) + 1)]  # One stack per number of translated words
    stacks[0][lm.begin()] = initial_hypothesis  # stack for 0 words translated

    for stack in stacks[:-1]:
        for h in sorted(stack.values(), key=lambda h: -h.logprob)[:opts.s]:  # Beam pruning
            for i in range(len(f)):
                for j in range(i + 1, len(f) + 1):
                    if f[i:j] in tm and not bitmap(range(i, j)) & h.coverage:  # Reordering support
                        for phrase in tm[f[i:j]]:
                            logprob = h.logprob + phrase.logprob
                            lm_state = h.lm_state
                            for word in phrase.english.split():
                                (lm_state, word_logprob) = lm.score(lm_state, word)
                                logprob += word_logprob
                            new_coverage = bitmap(range(i, j)) | h.coverage  # Update coverage
                            covered_words = bin(new_coverage).count('1')  # Count number of words covered
                            logprob += lm.end(lm_state) if covered_words == len(f) else 0.0  # End-of-sentence bonus
                            new_hypothesis = hypothesis(logprob, lm_state, h, phrase, new_coverage)
                            if lm_state not in stacks[covered_words] or stacks[covered_words][lm_state].logprob < logprob:
                                stacks[covered_words][lm_state] = new_hypothesis  # Recombination

    # Extract the best hypothesis from the last stack (full coverage)
    winner = max(stacks[-1].values(), key=lambda h: h.logprob)

    def extract_english(h):
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

    print(extract_english(winner))

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(winner)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" % (winner.logprob - tm_logprob, tm_logprob, winner.logprob))