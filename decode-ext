#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxsize, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=500, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False, help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

# tm should translate unknown words as-is with probability 1
for word in set(sum(french, ())):
    if (word,) not in tm:
        tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s using greedy search...\n" % (opts.input,))
for f in french:
    # Greedy search decodes by committing to the highest-probability hypothesis at each step.
    hypothesis = namedtuple("hypothesis", "logprob, lm_state, predecessor, phrase")
    initial_hypothesis = hypothesis(0.0, lm.begin(), None, None)

    current_hypothesis = initial_hypothesis
    i = 0
    while i < len(f):
        best_hypothesis = None
        best_span_len = 0  # Track the span length of the best hypothesis
        for j in range(i + 1, len(f) + 1):
            if f[i:j] in tm:
                for phrase in tm[f[i:j]]:
                    logprob = current_hypothesis.logprob + phrase.logprob
                    lm_state = current_hypothesis.lm_state
                    for word in phrase.english.split():
                        (lm_state, word_logprob) = lm.score(lm_state, word)
                        logprob += word_logprob
                    if j == len(f):
                        logprob += lm.end(lm_state)
                    
                    new_hypothesis = hypothesis(logprob, lm_state, current_hypothesis, phrase)
                    if best_hypothesis is None or new_hypothesis.logprob > best_hypothesis.logprob:
                        best_hypothesis = new_hypothesis
                        best_span_len = j - i  # Length of the current French span

        # Commit to the best hypothesis found in this iteration
        current_hypothesis = best_hypothesis
        i += best_span_len  # Move forward by the length of the best span

    # Extract the final translation from the best hypothesis
    def extract_english(h):
        return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

    print(extract_english(current_hypothesis))

    if opts.verbose:
        def extract_tm_logprob(h):
            return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
        tm_logprob = extract_tm_logprob(current_hypothesis)
        sys.stderr.write("LM = %f, TM = %f, Total = %f\n" %
                         (current_hypothesis.logprob - tm_logprob, tm_logprob, current_hypothesis.logprob))